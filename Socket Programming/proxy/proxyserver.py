# -*- coding: utf-8 -*-
"""proxyserver

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OlM9sGm5Fof0hjUY11qnSS-b-aAl4aR7
"""

# Import socket module
from socket import *

serverPort = 8888
# Create a TCP server socket
#(AF_INET is used for IPv4 protocols)
#(SOCK_STREAM is used for TCP)

serverSocket = socket(AF_INET, SOCK_STREAM)
webServer = socket(AF_INET, SOCK_STREAM)

# Fill in start
serverSocket.bind(("", serverPort))
serverSocket.listen(1)
# Fill in end

# Server should be up and running and listening to the incoming connections
while True:
    print('Ready to serve...')
    
    # Set up a new connection from the client
    connectionSocket, clientAddr = serverSocket.accept() #Fill in start             #Fill in end
    print (clientAddr)
    message = connectionSocket.recv(1024)
    filename_whost = message.split()[1]
    filename_b = filename_whost.split(b"/")[2]
    filename = filename_b.decode()
    # If an exception occurs during the execution of try clause
    # the rest of the clause is skipped
    # If the exception type matches the word after except
    # the except clause is executed
    try:
        #if file is in cache
        # Receives the request message from the client
        f = open(filename, 'rb')
        
        # Store the entire contenet of the requested file in a temporary buffer
        outputdata = f.read()#Fill in start         #Fill in end

        # Send the HTTP response header line to the connection socket
        # Fill in start
        connectionSocket.send("HTTP/1.1 200 OK\r\n\r\n".encode())
    # Fill in end
 
        # Send the content of the requested file to the connection socket
        #for i in range(0, len(outputdata)):
        connectionSocket.sendall(outputdata)
        connectionSocket.send("\r\n".encode())
        
        # Close the client connection socket
        connectionSocket.close()

    except IOError:
        #if file is not in cache
        print(filename)
        try:
            webServer.connect(('127.0.0.1', 6789))
            tmpstr ="GET "+ "/" + filename + " HTTP/1.1\r\n"
            webServer.send(tmpstr.encode())
            newFile = webServer.makefile('b',0)
        #newFile.write("GET "+ "/" + filename + " HTTP/1.1\r\n")
            tempBuffer = newFile.readlines()
            
            tempFile= open("./" + filename,"wb")
            for line in tempBuffer:
                tempFile.write(line)
                connectionSocket.send(line)
            connectionSocket.send("/r/n".encode())
        except:
            
        # Send HTTP response message for file not found
        # Fill in start
            connectionSocket.send("HTTP/1.1 404 Not Found\r\n\r\n".encode())
        # Fill in end
        
        # Close the client connection socket
        # Fill in start
            connectionSocket.close()
        # Fill in end
        serverSocket.close()